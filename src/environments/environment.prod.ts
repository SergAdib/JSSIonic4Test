/* tslint:disable */
// Do not edit this file, it is auto-generated at build time!
// See scripts/bootstrap.ts to modify the generation of this file.
// SERG TEST CONFIG ADDITION

var doc = (typeof document === 'undefined') ? {
  body: {},
  head: {
		insertBefore: function() {}
	},
  addEventListener: function addeventlistener() {},
  removeEventListener: function removeeventlistener() {},
  activeElement: {
    blur: function blur() {},
    nodename: '',
  },
  querySelector: function queryselector() {
    return null;
  },
  querySelectorAll: function queryselectorall() {
    return [];
  },
  getElementById: function getelementbyid() {
    return null;
  },
  createEvent: function createevent() {
    return {
      initevent: function initevent() {},
    };
  },
  createElement: function createelement() {
    return {
      children: [],
      childNodes: [],
      style: {},
      setAttribute: function setattribute() {},
      getElementsByTagName: function getelementsbytagname() {
        return [];
      },
    };
  },
  location: { hash: '' },
} : document;

var nav = (typeof navigator === 'undefined') ? {
  userAgent: '',
} : navigator;

var win = (typeof window === 'undefined') ? {
  document: doc,
  HTMLElement: {
    componentOnReady: function(cb) {return cb}
  },
  navigator: nav,
  location: {},
  history: {},
  customEvent: function customevent() {
    return this;
  },
  addEventListener: function addeventlistener() {},
  removeEventListener: function removeeventlistener() {},
  getComputedStyle: function getcomputedstyle() {
    return {
      getpropertyvalue: function getpropertyvalue() {
        return '';
      },
    };
  },
  image: function image() {},
  date: function date() {},
  screen: {},
  setTimeout: function settimeout() {},
  clearTimeout: function cleartimeout() {},
} : window;

try {
  if (global) {
    global["window"] = win;
    global["document"] = doc;
    global["navigator"] = nav;
  }
} catch {
  console.log("No globals");
}

// SERG TEST CONFIG ADDITION END --
export const environment = {
  "production": true,
  "sitecoreApiHost": "http://ionic4.dev.local",
  "sitecoreApiKey": "{D2999BDD-B2AD-4C13-870E-352B8546AA69}",
  "jssAppName": "ionic4",
  "sitecoreLayoutServiceConfig": "jss",
  "defaultLanguage": "en",
  "defaultServerRoute": "/",
  "graphQLEndpointPath": "/api/ionic4",
  "graphQLEndpoint": "http://ionic4.dev.local/api/ionic4?sc_apikey={D2999BDD-B2AD-4C13-870E-352B8546AA69}"
};
